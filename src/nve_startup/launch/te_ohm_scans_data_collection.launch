<launch>
  <arg name="robot" default="squash" />

  <arg name="output" default="screen" />
  <arg name="odom_stage" default="high" doc="The Wildcat output stage to use (high or tail)." />
  <arg name="respawn" default="true" />

  <arg name="run_ohm_mapping" default="true" doc="Should ohm_mapping be run?" />
  <arg name="run_adj_feature_mapper" default="false" doc="Should ohm_mapping be run?" />
  <arg name="run_ohm_scan_extraction" default="true" doc="Should ohm_mapping be run?" />

  <!-- Squash -->
  <arg if="$(eval arg('robot') == 'squash')" name="pack" default="p9" />
  <arg if="$(eval arg('robot') == 'squash')" name="platform" default="squash" />
  <arg if="$(eval arg('robot') == 'squash')" name="robot_name" default="r6" />
  <arg if="$(eval arg('robot') == 'squash')" name="self_strike" default="squash" />

   <!-- Squash -->
  <arg if="$(eval arg('robot') == 'rat')" name="pack" default="p18" />
  <arg if="$(eval arg('robot') == 'rat')" name="platform" default="rat" />
  <arg if="$(eval arg('robot') == 'rat')" name="robot_name" default="r1" />
  <arg if="$(eval arg('robot') == 'rat')" name="self_strike" default="rat" />

  <arg name="ROSCONSOLE_FORMAT" default="${severity} ${time} ${node}: ${message}" />
  <env name="ROSCONSOLE_FORMAT" value="$(arg ROSCONSOLE_FORMAT)" />

  <group ns="$(arg robot_name)">
    <remap from="/tf" to="tf" />
    <remap from="/tf_static" to="tf_static" />

    <!-- OHM Mapping  -->
    <!-- <group if="$(arg run_ohm_mapping)">
      <rosparam command="load" subst_value="true" file="$(find nve_startup)/config/$(arg platform)/$(arg platform)_ohm_mapping.yaml" />
      <node name="ohm_mapping" pkg="ohm_mapping_node" type="ohm_mapping_node" respawn="$(arg respawn)" output="$(arg output)">
        <remap from="slam/odom/high/cloud" to="slam/odom/$(arg odom_stage)/cloud" />
      </node>
    </group> -->

    <!-- <rosparam ns="behaviour_compositor" command="load" file="$(find nve_startup)/config/$(arg platform)/$(arg platform)_behaviour_compositor.yaml" />
    <node name="behaviour_compositor" pkg="behaviour_compositor" type="behaviour_compositor_node" respawn="$(arg respawn)">
      <remap from="slam/odom/high/pose" to="slam/odom/$(arg odom_stage)/pose" />
    </node> -->

    <group if="$(arg run_adj_feature_mapper)">
      <rosparam command="load" subst_value="true" file="$(find nve_startup)/config/$(arg platform)/$(arg platform)_ftm_navigation.yaml" />
      <node pkg="ftm_ros" type="feature_mapper_node" name="feature_mapper_node" clear_params="true" output="$(arg output)" >
        <remap from="ohm_cloud_in" to="ohm" />
      </node>
      <!-- <node pkg="tf2_ros" type="static_transform_publisher" name="tf_map_odom_broadcaster" args="1 0 0 0 0 0 1 ~odom map" /> -->
    </group>

    <group if="$(arg run_ohm_scan_extraction)">
      <node pkg="pdag" type="pose_cloud_patch_node.py" name="pose_cloud_patch_node" clear_params="true" output="screen">
        <param name="data_root_dir" value="/data/debug/csiro_mapping"/>
        <param name="data_set_name" value="2022_02_14_23_47_33Z" />
        <param name="target_frame" value="map" />
        <remap from="~cloud_in" to="costmap_global/costmap_pcl2"/>
      </node>
    </group>

  </group>

</launch>
